.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Regex 3"
.TH Regex 3 "2006-08-18" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
POSIX::Regex \- OO interface for the gnu regex engine
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use POSIX::Regex qw(:all);
.Ve
.PP
.Vb 1
\&    my $reg = new POSIX::Regex('a\e(a\e|b\e)\e(c\e)');
.Ve
.PP
.Vb 1
\&    print "You win a toy!\en" if $reg\->match("aac");
.Ve
.PP
.Vb 3
\&    if( my @m = $reg\->match("abc") ) { # returns the matches
\&        print "entire match: ", shift @m, "\en";
\&        print "\etgroup match: $_\en" for @m;
.Ve
.PP
.Vb 3
\&    } else {
\&        print "No toy for you!\en";
\&    }
.Ve
.SH "REGULAR OPTIONS"
.IX Header "REGULAR OPTIONS"
(All of the following text was plagarized without edit from 'man 3 regex'.)
.PP
If you choose to import :all then you will have the following regular options
that you may optionally pass to \fInew()\fR (aka regcomp).
.Sh "\s-1REG_ICASE\s0"
.IX Subsection "REG_ICASE"
Do  not differentiate case.  Subsequent \fIregexec()\fR searches using this pattern
buffer will be case insen\- sitive.
.Sh "\s-1REG_EXTENDED\s0"
.IX Subsection "REG_EXTENDED"
Use \s-1POSIX\s0 Extended Regular Expression syntax when interpreting regex.  If not
set, \s-1POSIX\s0  Basic  Regular Expression syntax is used.
.Sh "\s-1REG_NEWLINE\s0"
.IX Subsection "REG_NEWLINE"
Match-any-character operators don't match a newline.
.PP
A non-matching list ([^...])  not containing a newline does not match a newline.
.PP
Match-beginning-of-line operator (^) matches the empty string immediately after
a newline, regardless of whether eflags, the execution flags of \fIregexec()\fR,
contains \s-1REG_NOTBOL\s0.
.PP
Match-end-of-line operator ($) matches the empty string immediately  before  a
newline,  regardless  of whether eflags contains \s-1REG_NOTEOL\s0.
.Sh "\s-1REG_NOTBOL\s0"
.IX Subsection "REG_NOTBOL"
The match-beginning-of-line operator always fails to match  (but see  the
compilation  flag  \s-1REG_NEWLINE\s0 above) This flag may be used when different
portions of a string are passed to \fIregexec()\fR and the beginning of the string
should not be interpreted as the beginning of the line.
.Sh "\s-1REG_NOTEOL\s0"
.IX Subsection "REG_NOTEOL"
.SH "AUTHOR"
.IX Header "AUTHOR"
Jettero Heller <japh@voltar\-confed.org>
.PP
Jet is using this software in his own projects...  If you find bugs, please
please please let him know. :) Actually, let him know if you find it handy at
all.  Half the fun of releasing this stuff is knowing that people use it.
.PP
Additionally, he is aware that the documentation sucks.  Should you email him
for help, he will most likely try to give it.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
\&\s-1GPL\s0! (and/or whatever license the gnu regex engine is under)
.PP
Though, additionally, I will say that I'll be tickled if you were to include
this package in any commercial endeavor.  Also, any thoughts to the effect that
using this module will somehow make your commercial package \s-1GPL\s0 should be washed
away.
.PP
I hereby release you from any such silly conditions \*(-- if possible while still
matching the license from gnu regex.
.PP
This package and any modifications you make to it must remain \s-1GPL\s0.  Any programs
you (or your company) write shall remain yours (and under whatever copyright you
choose) even if you use this package's intended and/or exported interfaces in
them.
.PP
(again, if possible)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), man 3 regex
